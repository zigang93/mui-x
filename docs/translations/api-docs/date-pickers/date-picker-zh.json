{
  "componentDescription": "",
  "propDescriptions": {
    "acceptRegex": "Regular expression to detect &quot;accepted&quot; symbols.",
    "className": "className applied to the root component.",
    "closeOnSelect": "If <code>true</code> the popup or dialog will immediately close after submitting full date.",
    "components": "Overrideable components.",
    "componentsProps": "The props used for each component slot.",
    "defaultCalendarMonth": "Default calendar month displayed when <code>value={null}</code>.",
    "desktopModeMediaQuery": "CSS media query when <code>Mobile</code> mode will be changed to <code>Desktop</code>.",
    "DialogProps": "Props applied to the <a href=\"https://mui.com/material-ui/api/dialog/\"><code>Dialog</code></a> element.",
    "disabled": "If <code>true</code>, the picker and text field are disabled.",
    "disableFuture": "If <code>true</code> future days are disabled.",
    "disableHighlightToday": "If <code>true</code>, today&#39;s date is rendering without highlighting with circle.",
    "disableMaskedInput": "Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.",
    "disableOpenPicker": "Do not render open picker button (renders only text field with validation).",
    "disablePast": "If <code>true</code> past days are disabled.",
    "getOpenDialogAriaText": "Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType<br><br><strong>Signature:</strong><br><code>function(date: TInputDate, utils: MuiPickersAdapter&lt;TDate&gt;) =&gt; string</code><br><em>date:</em> The date from which we want to add an aria-text.<br><em>utils:</em> The utils to manipulate the date.<br> <em>returns</em> (string): The aria-text to render inside the dialog.",
    "getViewSwitchingButtonText": "Get aria-label text for switching between views button.<br><br><strong>Signature:</strong><br><code>function(currentView: CalendarPickerView) =&gt; string</code><br><em>currentView:</em> The view from which we want to get the button text.<br> <em>returns</em> (string): The label of the view.",
    "InputAdornmentProps": "Props to pass to keyboard input adornment.",
    "inputFormat": "Format string.",
    "inputRef": "Pass a ref to the <code>input</code> element.",
    "leftArrowButtonText": "Left arrow icon aria-label text.",
    "loading": "If <code>true</code> renders <code>LoadingComponent</code> in calendar instead of calendar view. Can be used to preload information and show it in calendar.",
    "mask": "Custom mask. Can be used to override generate from format. (e.g. <code>__/__/____ __:__</code> or <code>__/__/____ __:__ _M</code>).",
    "maxDate": "Maximal selectable date. @DateIOType",
    "minDate": "Minimal selectable date. @DateIOType",
    "onAccept": "Callback fired when date is accepted @DateIOType.<br><br><strong>Signature:</strong><br><code>function(value: TValue) =&gt; void</code><br><em>value:</em> The value that was just accepted.",
    "onChange": "Callback fired when the value (the selected date) changes @DateIOType.<br><br><strong>Signature:</strong><br><code>function(value: TValue, keyboardInputValue: string) =&gt; void</code><br><em>value:</em> The new parsed value.<br><em>keyboardInputValue:</em> The current value of the keyboard input.",
    "onClose": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).",
    "onError": "Callback that fired when input value or new <code>value</code> prop validation returns <strong>new</strong> validation error (or value is valid after error). In case of validation error detected <code>reason</code> prop return non-null value and <code>TextField</code> must be displayed in <code>error</code> state. This can be used to render appropriate form error.<br><a href=\"https://next.material-ui-pickers.dev/guides/forms\">Read the guide</a> about form integration and error displaying.<br><br><strong>Signature:</strong><br><code>function(reason: TError, value: TInputValue) =&gt; void</code><br><em>reason:</em> The reason why the current value is not valid.<br><em>value:</em> The invalid value.",
    "onMonthChange": "Callback firing on month change @DateIOType.<br><br><strong>Signature:</strong><br><code>function(month: TDate) =&gt; void | Promise</code><br><em>month:</em> The new month.<br> <em>returns</em> (void | Promise): -",
    "onOpen": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).",
    "onViewChange": "Callback fired on view change.<br><br><strong>Signature:</strong><br><code>function(view: CalendarPickerView) =&gt; void</code><br><em>view:</em> The new view.",
    "onYearChange": "Callback firing on year change @DateIOType.<br><br><strong>Signature:</strong><br><code>function(year: TDate) =&gt; void</code><br><em>year:</em> The new year.",
    "open": "Control the popup or dialog open state.",
    "OpenPickerButtonProps": "Props to pass to keyboard adornment button.",
    "openTo": "First view to show.",
    "orientation": "Force rendering in particular orientation.",
    "PaperProps": "Paper props passed down to <a href=\"https://mui.com/material-ui/api/paper/\">Paper</a> component.",
    "PopperProps": "Popper props passed down to <a href=\"https://mui.com/material-ui/api/popper/\">Popper</a> component.",
    "readOnly": "Make picker read only.",
    "reduceAnimations": "Disable heavy animations.",
    "renderDay": "Custom renderer for day. Check the <a href=\"https://mui.com/x/api/date-pickers/pickers-day/\">PickersDay</a> component.<br><br><strong>Signature:</strong><br><code>function(day: TDate, selectedDays: Array&lt;TDate | null&gt;, pickersDayProps: PickersDayProps&lt;TDate&gt;) =&gt; JSX.Element</code><br><em>day:</em> The day to render.<br><em>selectedDays:</em> The days currently selected.<br><em>pickersDayProps:</em> The props of the day to render.<br> <em>returns</em> (JSX.Element): The element representing the day.",
    "renderInput": "The <code>renderInput</code> prop allows you to customize the rendered input. The <code>props</code> argument of this render prop contains props of <a href=\"https://mui.com/material-ui/api/text-field/#props\">TextField</a> that you need to forward. Pay specific attention to the <code>ref</code> and <code>inputProps</code> keys.<br><br><strong>Signature:</strong><br><code>function(props: MuiTextFieldPropsType) =&gt; React.ReactNode</code><br><em>props:</em> The props of the input.<br> <em>returns</em> (React.ReactNode): The node to render as the input.",
    "renderLoading": "Component displaying when passed <code>loading</code> true.<br><br><strong>Signature:</strong><br><code>function() =&gt; React.ReactNode</code><br><br> <em>returns</em> (React.ReactNode): The node to render when loading.",
    "rifmFormatter": "Custom formatter to be passed into Rifm component.<br><br><strong>Signature:</strong><br><code>function(str: string) =&gt; string</code><br><em>str:</em> The un-formatted string.<br> <em>returns</em> (string): The formatted string.",
    "rightArrowButtonText": "Right arrow icon aria-label text.",
    "shouldDisableDate": "Disable specific date. @DateIOType<br><br><strong>Signature:</strong><br><code>function(day: TDate) =&gt; boolean</code><br><em>day:</em> The date to test.<br> <em>returns</em> (boolean): Returns <code>true</code> if the date should be disabled.",
    "shouldDisableMonth": "Disable specific months dynamically. Works like <code>shouldDisableDate</code> but for month selection view @DateIOType.<br><br><strong>Signature:</strong><br><code>function(month: TDate) =&gt; boolean</code><br><em>month:</em> The month to check.<br> <em>returns</em> (boolean): If <code>true</code> the month will be disabled.",
    "shouldDisableYear": "Disable specific years dynamically. Works like <code>shouldDisableDate</code> but for year selection view @DateIOType.<br><br><strong>Signature:</strong><br><code>function(year: TDate) =&gt; boolean</code><br><em>year:</em> The year to test.<br> <em>returns</em> (boolean): Returns <code>true</code> if the year should be disabled.",
    "showDaysOutsideCurrentMonth": "If <code>true</code>, days that have <code>outsideCurrentMonth={true}</code> are displayed.",
    "showToolbar": "If <code>true</code>, show the toolbar even in desktop mode.",
    "ToolbarComponent": "Component that will replace default toolbar renderer.",
    "toolbarFormat": "Date format, that is displaying in toolbar.",
    "toolbarPlaceholder": "Mobile picker date value placeholder, displaying if <code>value</code> === <code>null</code>.",
    "toolbarTitle": "Mobile picker title, displaying in the toolbar.",
    "TransitionComponent": "Custom component for popper <a href=\"https://mui.com/material-ui/transitions/#transitioncomponent-prop\">Transition</a>.",
    "value": "The value of the picker.",
    "views": "Array of views to show."
  },
  "classDescriptions": {},
  "slotDescriptions": {}
}
